# Node.js Express Web App to AWS Elastic Beanstalk
# Build a Node.js Express app and deploy it to AWS as a web app.

trigger:
- main
- master

variables:
  # AWS configuration
  awsRegion: 'us-east-1'
  
  # Elastic Beanstalk configuration
  applicationName: 'attendance-tracker'
  environmentName: 'attendance-app-prod'
  
  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'
      displayName: 'Install Node.js'

    - script: |
        npm ci
        npm run build --if-present
      displayName: 'npm install and build'

    - script: |
        npm run test --if-present
      displayName: 'npm test'

    # Create deployment package for AWS
    - script: |
        echo "Creating AWS deployment package..."
        mkdir -p aws-deployment
        # Copy application files (exclude development files)
        cp -r public aws-deployment/
        cp server.js aws-deployment/
        cp package*.json aws-deployment/
        cp Procfile aws-deployment/
        cp web.config aws-deployment/ || echo "web.config not found, skipping"
        
        # Create .ebextensions if needed for AWS configuration
        mkdir -p aws-deployment/.ebextensions
        
        # Install production dependencies in the deployment folder
        cd aws-deployment
        npm ci --production
        cd ..
        
        ls -la aws-deployment/
      displayName: 'Create AWS deployment package'

    - task: ArchiveFiles@2
      displayName: 'Archive AWS deployment files'
      inputs:
        rootFolderOrFile: 'aws-deployment'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/aws-deployment-$(Build.BuildId).zip
        replaceExistingArchive: true

    - upload: $(Build.ArtifactStagingDirectory)/aws-deployment-$(Build.BuildId).zip
      artifact: aws-drop

- stage: Deploy
  displayName: Deploy to AWS
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeployAWS
    displayName: Deploy to AWS Elastic Beanstalk
    environment: $(environmentName)
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: aws-drop
            
          - task: AWSCLI@1
            displayName: 'Deploy to Elastic Beanstalk'
            inputs:
              awsCredentials: 'AWS-Service-Connection'  # Configure this in Azure DevOps
              regionName: $(awsRegion)
              awsCommand: 'elasticbeanstalk'
              awsSubCommand: 'create-application-version'
              awsArguments: '--application-name $(applicationName) --version-label $(Build.BuildNumber) --source-bundle S3Bucket="your-deployment-bucket",S3Key="deployments/$(Build.BuildId).zip"'
              
          - task: AWSCLI@1
            displayName: 'Update Elastic Beanstalk Environment'
            inputs:
              awsCredentials: 'AWS-Service-Connection'
              regionName: $(awsRegion)
              awsCommand: 'elasticbeanstalk'
              awsSubCommand: 'update-environment'
              awsArguments: '--application-name $(applicationName) --environment-name $(environmentName) --version-label $(Build.BuildNumber)' 